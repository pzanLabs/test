#include "channel.h"
#include "macros.h"

#include <errno.h>
#include <fcntl.h>
#include <linux/limits.h>
#include <pthread.h>
#include <semaphore.h>
#include <string.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <unistd.h>

channel_t* channel_open(const char* path)
{
    // Use sem_name to initialize semaphore accompanied by channel
    char sem_name[PATH_MAX] = "sem_";
    strncpy(sem_name + 4, path, PATH_MAX - 5);
    sem_name[PATH_MAX - 1] = 0;

    // Implement stage 1 here

    sem_t* sem = sem_open(sem_name, O_CREAT, 0666, 1);

    int shmd_fd;

    if ((shmd_fd = shm_open(path, O_CREAT | O_EXCL | O_RDWR, 0666) == -1))
    {
        if (errno == EEXIST)
        {
            sem_post(sem);
            return NULL;
        }
        ERR("shm open");
    }

    sem_wait(sem);

    if (ftruncate(shmd_fd, 4096) == -1)
    {
        ERR("ftruncate");
    }

    char* shm_ptr;
    if ((shm_ptr = (char*)mmap(NULL, sizeof(channel_t*), PROT_READ | PROT_WRITE, MAP_SHARED, shmd_fd, 0)) == MAP_FAILED)
    {
        ERR("mmap");
    }
    channel_t* channel = (channel_t*)shm_ptr;
    pthread_mutexattr_t mutex_attr;
    pthread_mutexattr_init(&mutex_attr);
    pthread_mutexattr_setpshared(&mutex_attr, PTHREAD_PROCESS_SHARED);
    pthread_mutexattr_setrobust(&mutex_attr, PTHREAD_MUTEX_ROBUST);
    if (pthread_mutex_init(&channel->data_mtx, &mutex_attr) != 0)
    {
        ERR("mutex init");
    }
    if (pthread_cond_init(&channel->consumer_cv, NULL) != 0)
    {
        ERR("cond init");
    }
    if (pthread_cond_init(&channel->producer_cv, NULL) != 0)
    {
        ERR("cond init");
    }
    channel->status = CHANNEL_UNINITIALIZED;
    channel->length = 0;
    sem_post(sem);
    UNUSED(path);

    return NULL;
}

void channel_close(channel_t* channel)
{
    // Implement stage 1 here
    pthread_mutex_destroy(&channel->data_mtx);
    pthread_cond_destroy(&channel->consumer_cv);
    pthread_cond_destroy(&channel->producer_cv);
    UNUSED(channel);
}

int channel_produce(channel_t* channel, const char* produced_data, uint16_t length)
{
    // Implement stage 3 here
    pthread_mutex_lock(&channel->data_mtx);

    while (channel->status != CHANNEL_EMPTY)
    {
        pthread_cond_wait(&channel->producer_cv, &channel->data_mtx);
    }

    memcpy(channel->data, produced_data, length);
    channel->length = length;

    pthread_cond_signal(&channel->consumer_cv);

    channel->status = CHANNEL_DEPLETED;

    pthread_mutex_unlock(&channel->data_mtx);

    return 0;
}

int channel_consume(channel_t* channel, char* consumed_data, uint16_t* length)
{
    // Implement stage 2 here
    pthread_mutex_lock(&channel->data_mtx);

    if (channel->status == CHANNEL_DEPLETED)
    {
        pthread_mutex_unlock(&channel->data_mtx);
        return 1;
    }

    while (channel->status != CHANNEL_OCCUPIED)
    {
        pthread_cond_wait(&channel->consumer_cv, &channel->data_mtx);
    }

    memcpy(consumed_data, channel->data, channel->length);
    *length = channel->length;

    printf("Received data: %s\n", consumed_data);

    pthread_cond_signal(&channel->producer_cv);

    channel->status = CHANNEL_EMPTY;

    pthread_mutex_unlock(&channel->data_mtx);
    return 0;
}
